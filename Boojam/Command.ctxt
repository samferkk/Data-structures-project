#BlueJ class context
comment0.target=Command
comment0.text=\n\ This\ class\ is\ part\ of\ the\ "Campus\ of\ Kings"\ application.\ "Campus\ of\ Kings"\ is\ a\n\ very\ simple,\ text\ based\ adventure\ game.\n\ \n\ This\ class\ holds\ information\ about\ a\ command\ that\ was\ issued\ by\ the\ user.\ A\n\ command\ currently\ consists\ of\ two\ strings\:\ a\ command\ word\ and\ a\ second\ word\n\ (for\ example,\ if\ the\ command\ was\ "take\ map",\ then\ the\ two\ strings\ obviously\n\ are\ "take"\ and\ "map").\n\ \n\ The\ way\ this\ is\ used\ is\:\ Commands\ are\ already\ checked\ for\ being\ valid\ command\n\ words.\ If\ the\ user\ entered\ an\ invalid\ command\ (a\ word\ that\ is\ not\ known)\ then\n\ the\ command\ word\ is\ <null>.\n\ \n\ If\ the\ command\ had\ only\ one\ word,\ then\ the\ second\ word\ is\ <null>.\n\ \n\ @author\ Maria\ Jump\n\ @version\ 2015.02.01\n
comment1.params=firstWord
comment1.target=Command(CommandEnum)
comment1.text=\n\ Create\ a\ command\ object.\ First\ is\ supplied.\ The\ second\ word\ is\ assumed\n\ to\ be\ null.\n\ \n\ @param\ firstWord\n\ \ \ \ \ \ \ \ \ \ \ \ The\ first\ word\ of\ the\ command.\ Null\ if\ the\ command\ was\ not\n\ \ \ \ \ \ \ \ \ \ \ \ recognized.\n
comment2.params=firstWord\ rest
comment2.target=Command(CommandEnum,\ java.util.ArrayList)
comment2.text=\n\ Create\ a\ command\ object.\ First\ and\ second\ word\ must\ be\ supplied,\ but\n\ either\ one\ (or\ both)\ can\ be\ null.\n\ \n\ @param\ firstWord\n\ \ \ \ \ \ \ \ \ \ \ \ The\ first\ word\ of\ the\ command.\ Null\ if\ the\ command\ was\ not\n\ \ \ \ \ \ \ \ \ \ \ \ recognized.\n\ @param\ rest\n\ \ \ \ \ \ \ \ \ \ \ \ The\ rest\ of\ the\ command.\n
comment3.params=
comment3.target=CommandEnum\ getCommandWord()
comment3.text=\n\ Return\ the\ command\ word\ (the\ first\ word)\ of\ this\ command.\ If\ the\ command\n\ was\ not\ understood,\ the\ result\ is\ null.\n\ \n\ @return\ The\ command\ word.\n
comment4.params=
comment4.target=boolean\ isUnknown()
comment4.text=\n\ Returns\ if\ this\ command\ was\ not\ understood.\n\ \n\ @return\ true\ if\ this\ command\ was\ not\ understood.\n
comment5.params=
comment5.target=boolean\ hasSecondWord()
comment5.text=\n\ Returns\ if\ this\ command\ has\ a\ second\ word.\n\ \n\ @return\ true\ if\ the\ command\ has\ a\ second\ word.\n
comment6.params=index
comment6.target=boolean\ hasWord(int)
comment6.text=\n\ Returns\ if\ this\ command\ has\ more\ words.\n\n\ @param\ index\ The\ index\ of\ the\ word\ needed.\n\ @return\ true\ if\ the\ command\ has\ a\ word\ at\ given\ index.\n
comment7.params=index
comment7.target=java.lang.String\ getWord(int)
comment7.text=\n\ Returns\ the\ word\ at\ the\ requested\ index\ in\ the\ command.\n\ \n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ of\ word\ in\ the\ command\ that\ is\ being\ requested.\n\ \n\ @return\ A\ particular\ word\ in\ the\ command.\ Returns\ null\ if\ there\ is\ no\n\ \ \ \ \ \ \ \ \ word\ corresponding\ to\ that\ requested\ index.\n\ \n
comment8.params=
comment8.target=java.lang.String\ getRestOfLine()
comment8.text=\n\ Returns\ the\ second\ word\ of\ this\ command,\ if\ it\ exists.\n\ \n\ @return\ The\ second\ word\ of\ this\ command.\ Returns\ null\ if\ there\ was\ no\n\ \ \ \ \ \ \ \ \ second\ word.\n
numComments=9
